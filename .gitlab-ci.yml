###############################################################################
# For Gilab CI help on this file see
#   https://docs.gitlab.com/ee/ci/yaml
#
# If your commit message contains [ci skip] or [skip ci], using any
# capitalization, the commit will be created but the pipeline will be skipped.
#
# Code quality check is done using Phpqa, a tool that integrate other Php tools
# to analyse your code, see
#   https://github.com/EdgedesignCZ/phpqa
#
# A .phpqa.yml and .phpmd.xml files must be included at the root of the project
# for Code sniffer and Php Mess detector to work with Drupal. More options see
#   https://github.com/EdgedesignCZ/phpqa#advanced-configuration---phpqayml
#   https://github.com/EdgedesignCZ/phpqa/blob/master/.phpqa.yml
#
# See samples in this project.
###############################################################################
# https://github.com/AcroMedia/commerce-demo/blob/master/.gitlab-ci.yml
# https://github.com/Lullabot/drupal8ci/blob/master/dist/gitlabci/.gitlab-ci.yml
# https://bradjonesllc.com/blog/gitlab-ci-script-drupal-8-docker
variables:
  # Edit this part to your needs.
  #
  # Drupal custom code / theme only. We are checking our code quality, not
  # Drupal core.
  # Path is relative to project root, web/ is for Drupal Composer template,
  # change it if you are using docroot/ or any other web root.
  IGNORE_DIRS: "--ignoredDirs vendor,bootstrap"
  IGNORE_FILES: "--ignoredFiles Readme.md,style.css,print.css"
  CODE: "--analyzedDirs web/modules/custom,web/themes/custom ${IGNORE_DIRS} ${IGNORE_FILES}"
  # See Phpqa available tools:
  #   https://github.com/EdgedesignCZ/phpqa#available-tools
  # Allow some errors, this will stop the pipeline if a limit is reached.
  TOOLS: "--tools phpcs:10,phpmd:10,phpcpd:0,security-checker:0,parallel-lint:0"
###############################################################################
  # Next part do not need to be edited for a first quick run.
  #
  # Phpqa docker image tag and options like code to analyse relative to your 
  # project root.
  # https://hub.docker.com/r/zdenekdrahos/phpqa/tags/
  PHPQA: "v1.19.0"
  REPORT_DIR: "reports"
  # Drupal coding standards for Code Sniffer (phpcs) are provided by Coder module.
  # https://www.drupal.org/project/coder
  DRUPAL_CODER: "2.12"
  # Options for Phpqa to build a report to download, need artifacts set on the
  # job, see '.report' below.
  REPORT: "--report --buildDir ${REPORT_DIR}"

# All code quality jobs are in the same stage, add any deploy / build stages if
# needed. The idea is to run deploy jobs only if check pass.
stages:
  - build
  - code quality
  - code lint
  - php code metrics
  - deploy to testing
  - deploy to uat
  - deploy to production

# Default docker image.
image: alpine:latest

###############################################################################
# Gitlab ci templates for common jobs, see
# https://docs.gitlab.com/ee/ci/yaml/#anchors
###############################################################################

# Archive template for reports, we use Gitlab artifacts, see
#   https://docs.gitlab.com/ee/user/project/pipelines/job_artifacts.html
.report_template: &report_template
  artifacts:
    # Name will be 'check-NAME_OF_THE_BRANCH'
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    paths:
      - ${REPORT_DIR}/*
    # How long do we keep reports files.
    expire_in: 1 day
    when: always

# Use Phpqa docker image, see https://github.com/EdgedesignCZ/phpqa#docker
# We download the coder project to use the coding standard ruleset for Code_Sniffer.
.phpqa_template: &phpqa_template
  image: zdenekdrahos/phpqa:${PHPQA}
  before_script:
    - curl https://ftp.drupal.org/files/projects/coder-8.x-${DRUPAL_CODER}.tar.gz -o coder.tar.gz -s
    - tar xzf coder.tar.gz
  <<: *report_template

# Use Node docker image for Sass lint.
.node_template: &node_template
  image: node:alpine
  <<: *report_template

# Deploy process need an ssh private key set on the Project settings.
# We use an alipne docker image to make this lightweight.
.ssh_agent_template:
  before_script: &ssh_agent_template
    - apk add --no-cache openssh-client zip unzip
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Note this deploy key must be manually added to /home/ubuntu/.ssh/authorized_keys
    # On the target. Private key value is set on Gitlab settings.
    - echo -e "${STAGING_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    # Avoid warning on connection.
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

# Sample of a build, considering a Drupal 8 with composer, Bootstrap sass and drush.
# For more samples see
#   https://docs.gitlab.com/ee/ci/examples/deployment/composer-npm-deploy.html
.build_template: &build_template
  image: composer:latest
  before_script: *ssh_agent_template
  script:
    # Install a Drupal with drupal composer template.
    - composer create-project drupal-composer/drupal-project:8.x-dev drupal --stability dev --no-interaction --ignore-platform-reqs --no-scripts --no-suggest
    - mv web drupal/web
    # Install project libraries and dependencies.
    # - composer --ignore-platform-reqs --no-scripts --no-suggest --no-interaction --quiet install
    # Install and use compass.
    # - apk add --update ruby ruby-dev libffi-dev build-base
    # - gem install --no-document listen sass compass bootstrap-sass
    # - compass compile web/themes/custom/${THEME}
    # Sample to send our build somewhere.
    # - ssh -p22 server_user@server_host "mkdir htdocs/_tmp"
    # - scp -P22 -r build/* server_user@server_host:htdocs/_tmp
    # - ssh -p22 server_user@server_host "mv htdocs/curent htdocs/_old && mv htdocs/_tmp htdocs/current"
    # - ssh -p22 server_user@server_host "rm -rf htdocs/_old"
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    paths:
      - ./bin
      - ./config
      - ./drush
      - ./scripts
      - ./vendor
      - ./web
      - .env.example
      - .gitignore
      - '*.md'
      - LICENSE
      - 'composer.*'
      - load.environment.php
      - phpunit.xml.dist
    expire_in: 1 day

# Cache libraries in between jobs by branch, see
#   https://docs.gitlab.com/ee/ci/caching/#caching-php-dependencies
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - coder/
    # On composer build we cache the composer folder.
    - vendor/

###############################################################################
# Jobs definition.
###############################################################################

build:
  <<: *build_template
  stage: build
  only:
    - master
  # On composer build we cache the composer folder.
  cache:
    key: drupal-build-cache
    paths:
      - web/core

# Automated quality check job when something is pushed/merged on master.
# We have a limit on errors we accept on the tools, if failed we run a
# report and stop.
codequality:
  stage: code quality
  <<: *phpqa_template
  script:
    - mkdir -p ${REPORT_DIR}
    - phpqa ${REPORT} ${TOOLS} ${CODE}
  # Limit to branch push, for more options see
  # https://docs.gitlab.com/ee/ci/yaml/#only-and-except-simplified
  only:
    - branches

# Drupal coding standard best practices report (can not be included in
# codequality as we are already running Drupal coding standard).
best practices:
  stage: code quality
  <<: *phpqa_template
  script:
    - mkdir -p ${REPORT_DIR}
    - phpqa ${REPORT} --config ./phpqa_config/phpcs_drupal_best_practices --tools phpcs:10 ${CODE}
  only:
    - branches
  # Allow failure to produce report and alert.
  allow_failure: true

# This is a eslint report.
es lint:
  stage: code lint
  <<: *node_template
  script:
    - apk --no-cache add curl
    - curl https://cgit.drupalcode.org/drupal/plain/.eslintrc.json?h=8.5.x -o web/.eslintrc.json -s
    - mkdir -p web/core
    - curl https://cgit.drupalcode.org/drupal/plain/core/.eslintrc.json?h=8.5.x -o web/core/.eslintrc.json -s
    # Drupal 8.5.x specfic rules override.
    - curl https://cgit.drupalcode.org/drupal/plain/core/.eslintrc.passing.json?h=8.5.x -o web/core/.eslintrc.passing.json -s
    - npm install -g eslint eslint-config-airbnb eslint-plugin-import@^2.7.0 eslint-plugin-jsx-a11y@^6.0.2 eslint-plugin-react@^7.4.0
    - mkdir -p ${REPORT_DIR}
    - eslint --config ./web/core/.eslintrc.passing.json --ignore-pattern '**/bootstrap/**/*' --format html --output-file ${REPORT_DIR}/es-lint-report.html web/modules/custom/**/*.js web/themes/custom/**/*.js
  allow_failure: true

# This is a sass lint report.
sass lint:
  stage: code lint
  <<: *node_template
  script:
    - npm install -g sass-lint
    - mkdir -p ${REPORT_DIR}
    - sass-lint 'web/themes/custom/**/*.scss' --ignore '**/bootstrap/**/*' --verbose --format html --output ${REPORT_DIR}/sass-lint-report.html
  allow_failure: true

# This is a markdown lint report.
markdown lint:
  stage: code lint
  image: ruby:alpine
  <<: *report_template
  script:
    - gem install mdl
    - mkdir -p ${REPORT_DIR}
    - mdl ./ > ${REPORT_DIR}/markdown_lint.txt
  allow_failure: true
  when: manual

# Phpmetrics report, no pass or failure as it's just informative.
phpmetrics:
  stage: php code metrics
  <<: *phpqa_template
  script:
    - mkdir -p ${REPORT_DIR}
    - phpqa ${REPORT} --config ./phpqa_config/phpmetrics --tools phpmetrics ${CODE}
  when: manual

# Phploc report, no pass or failure as it's just informative.
phploc:
  stage: php code metrics
  <<: *phpqa_template
  script:
    - mkdir -p ${REPORT_DIR}
    - phpqa ${REPORT} --tools phploc ${CODE}
  when: manual

# Same reports for all Drupal codes including our custom.
phpmetrics Drupal:
  stage: php code metrics
  <<: *phpqa_template
  script:
    - mkdir -p ${REPORT_DIR}
    - phpqa ${REPORT} --config ./phpqa_config/phpmetrics --tools phpmetrics --analyzedDirs web
  cache:
    key: drupal-build-cache
  when: manual

phploc Drupal:
  stage: php code metrics
  <<: *phpqa_template
  script:
    - mkdir -p ${REPORT_DIR}
    - phpqa ${REPORT} --tools phploc --analyzedDirs web
  cache:
    key: drupal-build-cache
  when: manual

###############################################################################
# Deploy jobs definition.
###############################################################################

deploy to testing:
  stage: deploy to testing
  environment:
    name: testing
    url: http://MY_TESTING_HOST
  before_script: *ssh_agent_template
  script:
    - echo "Deploy to testing"
    # - ssh $USER_NAME@$TESTING_HOST "cd ${DRUPAL_FOLDER}; ./scripts/deploy_script.sh;"
  only:
    - testing
    - master

deploy to uat:
  stage: deploy to uat
  environment:
    name: uat
    url: http://MY_UAT_HOST
  before_script: *ssh_agent_template
  script:
    - echo "Deploy to uat"
    # - ssh $USER_NAME@$TESTING_HOST "cd ${DRUPAL_FOLDER}; ./scripts/deploy_script.sh;"
  only:
    - uat
    - master
  when: manual

deploy to production:
  stage: deploy to production
  environment:
    name: production
    url: http://MY_PRODUCTION_HOST
  before_script: *ssh_agent_template
  script:
    - echo "Deploy to production"
    # - ssh $USER_NAME@$TESTING_HOST "cd ${DRUPAL_FOLDER}; ./scripts/deploy_script.sh;"
  only:
    - production
    - master
  when: manual
