################################################################################
# Gitlab CI integration for Drupal 8/9 project or module: tests, code quality,
# linting, metrics and deploy samples.
#
# Project: https://gitlab.com/mog33/gitlab-ci-drupal
# Documentation: https://gitlab.com/mog33/gitlab-ci-drupal/-/blob/8.x-2-x/README.md
# Issues: https://gitlab.com/mog33/gitlab-ci-drupal/-/issues
# Author: Jean Valverde contact@dev-drupal.com
# License: GPL-3
#
# If you want to support this project, you can
# - Buy me a coffee : https://bit.ly/34jPKcE
# - Hire me as a freelance for any Drupal related work
# - Promote me to any company looking for any Drupal related work
# - Help me with testing / documentation / grammar fixes / use cases
#
################################################################################

# The ref is relative to the version of the project to use, best to use a tag.
include:
  # If hosted on gitlab.com.
  - project: 'mog33/gitlab-ci-drupal'
    ref: 8.x-2-dev
    file: '/.gitlab-ci/.gitlab-ci-template.yml'
  # If hosted on an other Gitlab instance.
  # - remote: 'https://gitlab.com/mog33/gitlab-ci-drupal/raw/8.x-2-dev/.gitlab-ci-template.yml'

################################################################################
# Gitlab-CI variables documentation:
# https://docs.gitlab.com/ee/ci/variables/
#
# Variables, can be set here or on
#   Gitlab CI UI > settings > CI/CD > variables
# UI take precedence on variables here.
# https://docs.gitlab.com/ee/ci/variables/README.html#priority-of-environment-variables
################################################################################

variables:
  # This is mandatory to get default variables.
  extends: .default_variables

  # Global config remote files ref.
  # MUST be the same as include: ref: from above.
  CI_REMOTE_FILES_REF: 8.x-2-dev

  # Set a version, default is Drupal 8.8, can be 8.9 or 9.0.
  # CI_DRUPAL_VERSION: "8.8"

  ##############################################################################
  # Override default variables for a module.
  #
  # Default CI setup is for a 'project' (full Drupal with a composer.json), next
  # section contains common variables to change for a module (module, theme or
  # profile). Simply uncomment to set the CI for a module.
  #
  # CI_TYPE: module
  # # Default is 'no-drupal', ie: no Drupal included in the CI.
  # CI_IMAGE_VARIANT: drupal
  # # Code quality dirs, must include your PHP code to check.
  # DIRS_QA: "${CI_PROJECT_DIR}"
  # # Eslint / Stylelint files to test.
  # DIRS_JS: "${CI_PROJECT_DIR}/**/*.js"
  # DIRS_CSS: "${CI_PROJECT_DIR}/**/*.css"
  # # phpmetrics / phpstats dirs to include.
  # DIRS_PHP: "${CI_PROJECT_DIR}"
  # # Set SKIP_XXX variable to 1 to skip.
  # # Security is for a Drupal project with third party.
  # SKIP_TEST_SECURITY: 1
  # # Only needed if you have Behat tests.
  # SKIP_TEST_BEHAT: 1
  # # Accessibility tests, more for a Drupal project.
  # SKIP_TEST_PA11Y: 1
  # # Default is '--skiptags core', if Nightwatch.js tests, add your tag.
  # NIGHTWATCH_TESTS: --tag my_module
  # # Or you can disable Nightwatch tests with:
  # SKIP_TEST_NIGHTWATCH: 1
  # # If you don't have any css files, you can skip with
  # SKIP_LINT_CSS: 1
  # # If you don't have any javascript files, you can skip with
  # SKIP_LINT_JS: 1
  #
  ##############################################################################

  ##############################################################################
  # Here you can override more variable.
  # As a sample here is a list of DIRS and SKIP variables, see documentation for
  # more variables.
  ##############################################################################
  ##############################################################################
  # List of DIRS_* variables to define dirs to analyse for specific jobs.
  # Code quality dirs, must include your PHP code to check.
  # DIRS_QA: "${CI_PROJECT_DIR}"
  # Eslint / Stylelint files to test.
  # Space separated for multiple folders.
  # Default is to check files under all custom folders.
  # DIRS_JS: "${CI_PROJECT_DIR}/**/custom/**/*.js"
  # DIRS_CSS: "${CI_PROJECT_DIR}/**/custom/**/css/*.css"
  # phpmetrics / phpstats dirs to include.
  # Default is to check all dirs.
  # DIRS_PHP: "${CI_PROJECT_DIR}"
  #
  # # ALL SKIP variables, uncomment and set to 1 to skip a job.
  # SKIP_BUILD: 1
  # SKIP_TESTS: 1 # Skip all tests, ignore SKIP_TEST_*.
  # SKIP_TEST_UNITKERNEL: 1
  # SKIP_TEST_FUNCTIONAL: 1
  # SKIP_TEST_FUNCTIONALJS: 1
  # SKIP_TEST_NIGHTWATCH: 1
  # SKIP_TEST_SECURITY: 1
  # SKIP_TEST_BEHAT: 1
  # SKIP_TEST_PA11Y: 1
  # SKIP_QA: 1 # Skip all qa, ignore SKIP_QA_*.
  # SKIP_QA_CODEQUALITY: 1
  # SKIP_QA_BESTPRACTICES: 1
  # SKIP_LINT: 1 # Skip all lint, ignore SKIP_LINT_*.
  # SKIP_LINT_CSS: 1
  # SKIP_LINT_JS: 1
  # SKIP_METRICS: 1 # Skip all metrics, ignore SKIP_METRICS_*.
  # SKIP_METRICS_PHPMETRICS: 1
  # SKIP_METRICS_PHPSTATS: 1

################################################################################
# ADVANCED USAGE
#
# Default stages and any job can be overridden.
# See documentation for more information.
################################################################################

# Override stages if needed. for example to add or adapt deploy.
# Here we add a 'deploy to testing' step.
# https://docs.gitlab.com/ee/ci/yaml/README.html#stages

# stages:
#   - build
#   - tests
#   - metrics
#   # [DEPLOY] All deploy jobs can be set here.
#   # Sample of a deploy workflow:
#   # Manual if branch testing or master or tag.
#   # - deploy to testing
#   # Manual if branch master or tag.
#   # - deploy to staging
#   # Manual if branch master or tag.
#   # - deploy to production

################################################################################
# [WIP] All reports on one page.
################################################################################

# pages:
#   stage: publish reports
#   extends: .publish_gitlab_pages_template

################################################################################
# Deploy samples.
#
# Some deploy samples that can be used as a starting point for your deploy.
# Note that a deploy process is dependent of your infrastructure and tools,
# there is no generic deploy process.
################################################################################

# SSH / SCP based deploy sample job for a project. Could be a starting point
# if you have a remote ssh access to your environment.
#
# You must fill variables on the deploy job or on
# Gitlab CI UI > settings > CI/CD
#
# Uncomment and adapt for each stages you added above.
#
# See Gitlab-CI Environments documentation:
# https://docs.gitlab.com/ee/ci/environments.html#configuring-environments
# For deploy samples, see examples in documentation:
# https://docs.gitlab.com/ee/ci/examples/README.html

# Deploy to testing:
#   stage: deploy to testing
#   extends: .deploy_ssh
#   environment:
#     name: testing
#     url: https://SET_MY_URL
#   # To make this deploy job manual on the pipeline.
#   # https://docs.gitlab.com/ee/ci/environments.html#configuring-manual-deployments
#   # when: manual
#   # Optional to override the tags default in .deploy_ssh
#   # https://docs.gitlab.com/ee/ci/yaml/README.html#onlyexcept-basic
#   only:
#     refs:
#       - testing
#       # - master
#       # - tags
#   # Variables can be set from 'Gitlab CI UI > settings > CI/CD > variables' as
#   # named below or directly here.
#   variables:
#     ENV_USER: "${TESTING_USER}"
#     ENV_HOST: "${TESTING_HOST}"
#     ENV_PATH: "${TESTING_PATH}"
#     # Adapt if you are using the same key or different ssh keys.
#     ENV_KEY: "${PRIVATE_KEY}"
#     # ENV_KEY: "${TESTING_PRIVATE_KEY}"
#     # ENV_KEY: "${STAGING_PRIVATE_KEY}"
#     # ENV_KEY: "${PRODUCTION_PRIVATE_KEY}"
#   ##############################################################################
#   # Deploy script, this is just an example for scp / ssh remote command for a
#   # Drupal project.
#   ##############################################################################
#   script:
#     # Create remote path and send build.
#     - ssh -p22 ${ENV_USER}@${ENV_HOST} "mkdir ${ENV_PATH}/_tmp"
#     - scp -P22 -r vendor web *.php ${ENV_USER}@${ENV_HOST}:${ENV_PATH}/_tmp
#     # Replace Drupal with new build and keep previous version.
#     - ssh -p22 ${ENV_USER}@${ENV_HOST} "mv ${ENV_PATH}/current ${ENV_PATH}/_previous && mv ${ENV_PATH}/_tmp ${ENV_PATH}/current"
#     # Run any personal deploy script (backup db, drush updb, drush cim...)
#     - ssh -p22 ${ENV_USER}@${ENV_HOST} "${ENV_PATH}/scripts/deploy.sh --env=testing"

################################################################################
# Release samples.
################################################################################
