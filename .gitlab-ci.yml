variables:
  USER_NAME: "ubuntu"
  DRUPAL_FOLDER: "/var/www/htdocs/MY_DRUPAL_ROOT"
  THEME: "MY_THEME_NAME"
  TESTING_HOST: "MY_HOST_OR_IP"
  STAGING_HOST: "MY_HOST_OR_IP"
  PRODUCTION_HOST: "MY_HOST_OR_IP"
  WEB_ROOT: "web"
  UNIT_UNIT_TEST_ROOT: "core/modules/node"
  PHP_CODE: "${WEB_ROOT}/modules/custom,${WEB_ROOT}/themes/custom"
  JS_CODE: "${WEB_ROOT}/modules/custom/**/*.js ${WEB_ROOT}/themes/custom/**/*.js"
  JS_CODE_IGNORE: "**/bootstrap/**/*"
  SASS_CODE: "${WEB_ROOT}/themes/custom/**/*.scss,${WEB_ROOT}/themes/custom/**/*.sass"
  PHPQA_IGNORE_DIRS: "--ignoredDirs vendor,bootstrap"
  PHPQA_IGNORE_FILES: "--ignoredFiles Readme.md,style.css,print.css"
  TOOLS: "--tools phpcs:5,phpmd:5,phpcpd:0,security-checker,parallel-lint"
  PHPQA: "v1.19.0"
  PHPMETRICS: "v2.3.2"
  REPORT_DIR: "reports"
  DRUPAL_CODER: "2.12"
  PHPQA_REPORT: "--report --buildDir ${REPORT_DIR}"
  PHPQA_PHP_CODE: "--analyzedDirs ${PHP_CODE} ${PHPQA_IGNORE_DIRS} ${PHPQA_IGNORE_FILES}"
  PHPQA_ALL_CODE: "--analyzedDirs ${WEB_ROOT} ${PHPQA_IGNORE_DIRS} ${PHPQA_IGNORE_FILES}"
stages:
  - build
  - test
  - code quality
  - code lint
  - php code metrics
  - deploy to testing
  - deploy to staging
  - deploy to production
image: alpine:latest
.report_template: &report_template
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    paths:
      - ${REPORT_DIR}/*
    expire_in: 1 week
    when: always
.phpqa_template: &phpqa_template
  image: zdenekdrahos/phpqa:${PHPQA}
  before_script:
    - if [ ! -d ./coder/coder_sniffer ];
      then
        curl https://ftp.drupal.org/files/projects/coder-8.x-${DRUPAL_CODER}.tar.gz -o coder.tar.gz -s;
      fi
    - if [ -f coder.tar.gz ];
      then
        tar xzf coder.tar.gz;
      fi
    - mkdir -p ${REPORT_DIR}
    - chmod -R 777 ${REPORT_DIR}
  after_script:
    - if [ -d ./${REPORT_DIR} ];
      then rm -f ./${REPORT_DIR}/*.xml;
      fi
  <<: *report_template
.phpqmetrics_template: &phpqmetrics_template
  image: composer:latest
  before_script:
    - curl -L https://github.com/phpmetrics/PhpMetrics/releases/download/${PHPMETRICS}/phpmetrics.phar
      -o phpmetrics -s
    - chmod +x phpmetrics
    - mkdir -p ${REPORT_DIR}/metrics
  <<: *report_template
.node_template: &node_template
  image: node:8-alpine
  <<: *report_template
.ruby_template: &ruby_template
  image: ruby:2-alpine
  <<: *report_template
.ssh_agent_template:
  before_script: &ssh_agent_template
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "${STAGING_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
.build_template: &build_template
  image: composer:latest
  script:
    - composer create-project drupal-composer/drupal-project:8.x-dev drupal
      --stability dev --no-interaction --ignore-platform-reqs --quiet
    - cp -r drupal/* .
    - composer require drupal/bootstrap
      --ignore-platform-reqs --no-scripts --quiet
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    paths:
      - ./drush
      - ./scripts
      - ./vendor
      - ./${WEB_ROOT}
      - LICENSE
      - README.md
      - composer.json
      - composer.lock
      - load.environment.php
    expire_in: 1 day
.test_template: &test_template
  stage: test
  except:
    - master
  only:
    - testing
  image: juampynr/drupal8ci:latest
  services:
    - mariadb:10.3
  before_script:
    - mkdir -p /var/www/html
    - ln -s ${WEB_ROOT} /var/www/html/web
    - apache2-foreground&
    - mkdir -p ${REPORT_DIR}
    - chmod -R 777 ${REPORT_DIR}
    - cp config/phpunit.xml ${WEB_ROOT}/core/
  variables:
    MYSQL_ALLOW_EMPTY_PASSWORD: "1"
    MYSQL_DATABASE: drupal8
    DB_URL: "mysql://root@mariadb/drupal8"
    SIMPLETEST_DB: "mysql://root@mariadb/drupal8"
    SIMPLETEST_BASE_URL: "http://localhost"
    BROWSERTEST_OUTPUT_DIRECTORY: "${WEB_ROOT}/sites/simpletest"
  <<: *report_template
  dependencies:
    - build
cache:
  key: coder
  paths:
    - coder
build:
  <<: *build_template
  stage: build
  except:
    - master
  after_script:
    - ./vendor/bin/drush site:install
      --yes
      --root "/var/www/html/web"
      --db-url ${DB_URL}
    - mkdir -p dump
    - if [ ! -f $CI_PROJECT_DIR/dump/db_dump.sql ];
      then
        ./vendor/bin/drush sql-dump
        --gzip
        --result-file=${CI_PROJECT_DIR}/dump/db_dump.sql;
      fi
  cache:
    key: drupal-build-cache
    paths:
      - ${WEB_ROOT}
      - vendor
      - dump
unit_kernel_tests:
  <<: *test_template
  script:
    - cd ${WEB_ROOT}
    - sudo -E -u www-data
      ../vendor/bin/phpunit
        -c core
        --log-junit ../${REPORT_DIR}/phpunit.xml
        --testdox-html ../${REPORT_DIR}/phpunit.html
        --testsuite=unit
        ${UNIT_TEST_ROOT}
web_tests:
  <<: *test_template
  script:
    - cd ${WEB_ROOT}
    - sudo -E -u www-data
      ../vendor/bin/phpunit
        -c core
        --log-junit ../${REPORT_DIR}/phpunit.xml
        --testdox-html ../${REPORT_DIR}/phpunit.html
        --group Drupal
        ${UNIT_TEST_ROOT}
code_coverage:
  <<: *test_template
  script:
    - mkdir -p ${REPORT_DIR}/coverage-xml
    - mkdir -p ${REPORT_DIR}/coverage-html
    - chmod -R 777 ${REPORT_DIR}
    - cd ${WEB_ROOT}
    - timeout 60m sudo -E -u www-data
      ../vendor/bin/phpunit
        -c core
        --coverage-xml ../${REPORT_DIR}/coverage-xml
        --coverage-html ../${REPORT_DIR}/coverage-html
        --testsuite nonfunctional
        ${UNIT_TEST_ROOT}
codequality:
  stage: code quality
  <<: *phpqa_template
  script:
    - phpqa ${PHPQA_REPORT} ${TOOLS} ${PHPQA_PHP_CODE}
  only:
    - branches
best practices:
  stage: code quality
  <<: *phpqa_template
  script:
    - phpqa ${PHPQA_REPORT}
      --config ./phpqa_config/phpcs_drupal_best_practices
      --tools phpcs:10
      ${PHPQA_PHP_CODE}
  only:
    - branches
  allow_failure: true
code_quality:
  image: docker:stable
  stage: code quality
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]
  when: manual
es lint:
  stage: code lint
  <<: *node_template
  script:
    - apk --no-cache add curl
    - curl https://cgit.drupalcode.org/drupal/plain/.eslintrc.json?h=8.5.x
      -o ${WEB_ROOT}/.eslintrc.json -s
    - mkdir -p ${WEB_ROOT}/core
    - curl https://cgit.drupalcode.org/drupal/plain/core/.eslintrc.json?h=8.5.x
      -o ${WEB_ROOT}/core/.eslintrc.json -s
    - curl https://cgit.drupalcode.org/drupal/plain/core/.eslintrc.passing.json?h=8.5.x
      -o ${WEB_ROOT}/core/.eslintrc.passing.json -s
    - npm install -g eslint eslint-config-airbnb eslint-plugin-import@^2.7.0
     eslint-plugin-jsx-a11y@^6.0.2 eslint-plugin-react@^7.4.0
    - eslint --config ./${WEB_ROOT}/core/.eslintrc.passing.json
      --format html
      --output-file ${REPORT_DIR}/es-lint-report.html
      --ignore-pattern ${JS_CODE_IGNORE}
      ${JS_CODE}
  allow_failure: true
sass lint:
  stage: code lint
  <<: *node_template
  script:
    - npm install -g sass-lint
    - sass-lint ${SASS_CODE}
      --verbose
      --format html
      --output ${REPORT_DIR}/sass-lint-report.html
      --ignore ${JS_CODE_IGNORE}
  allow_failure: true
markdown lint:
  stage: code lint
  <<: *ruby_template
  script:
    - gem install mdl
    - mdl ./ > ${REPORT_DIR}/markdown_lint.txt
  allow_failure: true
  when: manual
phpmetrics:
  stage: php code metrics
  only:
    - staging
    - master
  <<: *phpqmetrics_template
  script:
    - ./phpmetrics
      --report-html=${REPORT_DIR}/metrics
      --extensions=php,inc,module
      ${PHP_CODE}
  when: manual
phploc:
  stage: php code metrics
  only:
    - staging
    - master
  <<: *phpqa_template
  script:
    - phpqa ${PHPQA_REPORT}
      --tools phploc
      ${PHPQA_PHP_CODE}
  when: manual
phpmetrics All:
  stage: php code metrics
  only:
    - staging
    - master
  <<: *phpqmetrics_template
  script:
    - ./phpmetrics
      --report-html=${REPORT_DIR}/metrics
      --extensions=php,inc,module
      ${WEB_ROOT}
  cache:
    key: drupal-build-cache
  dependencies:
    - build
  when: manual
phploc All:
  stage: php code metrics
  only:
    - staging
    - master
  <<: *phpqa_template
  script:
    - phpqa ${PHPQA_REPORT} --tools phploc ${PHPQA_ALL_CODE}
  cache:
    key: drupal-build-cache
  dependencies:
    - build
  when: manual
deploy to testing:
  stage: deploy to testing
  environment:
    name: testing
    url: http://${TESTING_HOST}
  before_script: *ssh_agent_template
  script:
    - echo "Deploy to testing"
  only:
    - testing
    - master
deploy to staging:
  stage: deploy to staging
  environment:
    name: staging
    url: http://${STAGING_HOST}
  before_script: *ssh_agent_template
  script:
    - echo "Deploy to staging"
  only:
    - staging
    - master
  when: manual
deploy to production:
  stage: deploy to production
  environment:
    name: production
    url: http://${PRODUCTION_HOST}
  before_script: *ssh_agent_template
  script:
    - echo "Deploy to production"
  only:
    - production
    - master
  when: manual
