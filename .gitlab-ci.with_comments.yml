###############################################################################
# For Gilab CI help on this file see
#   https://docs.gitlab.com/ee/ci/yaml
#
# If your commit message contains [ci skip] or [skip ci], using any
# capitalization, the commit will be created but the pipeline will be skipped.
#
# Code quality check is done using Phpqa, a tool that integrate other Php tools
# to analyse your code, see
#   https://github.com/EdgedesignCZ/phpqa
#
# A .phpqa.yml and .phpmd.xml files must be included at the root of the project
# for Code sniffer and Php Mess detector to work with Drupal. More options see
#   https://github.com/EdgedesignCZ/phpqa#advanced-configuration---phpqayml
#   https://github.com/EdgedesignCZ/phpqa/blob/master/.phpqa.yml
# See samples in this project.
#
###############################################################################
# A lot of help from those projects:
# https://github.com/AcroMedia/commerce-demo/blob/master/.gitlab-ci.yml
# https://github.com/Lullabot/drupal8ci/blob/master/dist/gitlabci/.gitlab-ci.yml
# https://github.com/manumilou/gitlab-ci-example-drupal/blob/master/.gitlab-ci.yml
###############################################################################
variables:
  # Edit this part to your needs.
  #
  # Make CI more verbose in case of problem.
  #CI_DEBUG_TRACE: "1"
  #
  # Global settings for all env used for deploy.
  USER_NAME: "ubuntu"
  DRUPAL_FOLDER: "/var/www/htdocs/MY_DRUPAL_ROOT"
  # For Sass when build in case of a Drupal Bootstrap sub theme.
  THEME: "MY_THEME_NAME"
  # Testing config
  TESTING_HOST: "MY_HOST_OR_IP"
  # Staging config
  STAGING_HOST: "MY_HOST_OR_IP"
  # Production config
  PRODUCTION_HOST: "MY_HOST_OR_IP"
  #
  # Drupal custom code / theme / all code. We are checking our code quality,
  # and optionally Drupal core.
  # Path is relative to project root, web/ is for Drupal Composer template,
  # change it if you are using docroot/ or any other web root.
  WEB_ROOT: "web"
  # Test unit folder.
  UNIT_UNIT_TEST_ROOT: "core/modules/node"
  # Comma separated for phpqa and phpmetrics.
  PHP_CODE: "${WEB_ROOT}/modules/custom,${WEB_ROOT}/themes/custom"
  # Space separated for eslint and sass lint.
  JS_CODE: "${WEB_ROOT}/modules/custom/**/*.js ${WEB_ROOT}/themes/custom/**/*.js"
  JS_CODE_IGNORE: "**/bootstrap/**/*"
  SASS_CODE: "${WEB_ROOT}/themes/custom/**/*.scss,${WEB_ROOT}/themes/custom/**/*.sass"
  # Ignore files and dir for all Phpqa tools.
  PHPQA_IGNORE_DIRS: "--ignoredDirs vendor,bootstrap"
  PHPQA_IGNORE_FILES: "--ignoredFiles Readme.md,style.css,print.css"
  # See Phpqa available tools:
  #   https://github.com/EdgedesignCZ/phpqa#available-tools
  # Allow some errors, this will stop the pipeline if a limit is reached.
  TOOLS: "--tools phpcs:5,phpmd:5,phpcpd:0,security-checker,parallel-lint"
###############################################################################
  # Next part do not need to be edited for a first quick run.
  #
  # Phpqa docker image tag and options like code to analyse relative to your 
  # project root.
  #   https://hub.docker.com/r/zdenekdrahos/phpqa/tags/
  PHPQA: "v1.19.0"
  # Phpmetrics use the last phar release.
  PHPMETRICS: "v2.3.2"
  REPORT_DIR: "reports"
  # Drupal coding standards for Code Sniffer (phpcs) are provided by Coder module.
  #   https://www.drupal.org/project/coder
  DRUPAL_CODER: "2.12"
  # Options for Phpqa to build a report to download, need artifacts set on the
  # job, see '.report' below.
  PHPQA_REPORT: "--report --buildDir ${REPORT_DIR}"
  PHPQA_PHP_CODE: "--analyzedDirs ${PHP_CODE} ${PHPQA_IGNORE_DIRS} ${PHPQA_IGNORE_FILES}"
  PHPQA_ALL_CODE: "--analyzedDirs ${WEB_ROOT} ${PHPQA_IGNORE_DIRS} ${PHPQA_IGNORE_FILES}"

# All code quality jobs are in the same stage, add any deploy / build stages if
# needed. The idea is to run deploy jobs only if check pass.
# Current workflow is:
# Testing
#   build
#   test
#   code quality
#   code lint
#   deploy to testing
# Staging
#   code quality
#   code lint
#   php code metrics
#   deploy to testing
#   manual deploy to staging
# Production
#   code quality
#   code lint
#   php code metrics
#   deploy to testing
#   manual deploy to staging
#   manual deploy to production
stages:
  - build
  - test
  - code quality
  - code lint
  - php code metrics
  - deploy to testing
  - deploy to staging
  - deploy to production

# Default docker image.
image: alpine:latest

###############################################################################
# Gitlab ci templates for common jobs, see
# https://docs.gitlab.com/ee/ci/yaml/#anchors
###############################################################################

# Archive template for reports, we use Gitlab artifacts, see
#   https://docs.gitlab.com/ee/user/project/pipelines/job_artifacts.html
.report_template: &report_template
  artifacts:
    # Name will be based on job and branch.
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    paths:
      - ${REPORT_DIR}/*
    # How long do we keep reports files.
    expire_in: 1 week
    # Force artifacts even if the job fail.
    when: always

# Use Phpqa docker image, see https://github.com/EdgedesignCZ/phpqa#docker
# We download the coder project to use the coding standard ruleset for Code_Sniffer.
.phpqa_template: &phpqa_template
  image: zdenekdrahos/phpqa:${PHPQA}
  before_script:
    - if [ ! -d ./coder/coder_sniffer ];
      then
        curl https://ftp.drupal.org/files/projects/coder-8.x-${DRUPAL_CODER}.tar.gz -o coder.tar.gz -s;
      fi
    - if [ -f coder.tar.gz ];
      then
        tar xzf coder.tar.gz;
      fi
    - mkdir -p ${REPORT_DIR}
    - chmod -R 777 ${REPORT_DIR}
  # We don't need phpqa xml files, uncomment if needed.
  after_script:
    - if [ -d ./${REPORT_DIR} ];
      then rm -f ./${REPORT_DIR}/*.xml;
      fi
  <<: *report_template

# We use Phpmetrics for metrics report.
# Is included in phpqa but standalone provide the last version.
.phpqmetrics_template: &phpqmetrics_template
  image: composer:latest
  before_script:
    - curl -L https://github.com/phpmetrics/PhpMetrics/releases/download/${PHPMETRICS}/phpmetrics.phar
      -o phpmetrics -s
    - chmod +x phpmetrics
    - mkdir -p ${REPORT_DIR}/metrics
  <<: *report_template

# Use Node docker image for Eslint and Sass lint.
.node_template: &node_template
  image: node:8-alpine
  <<: *report_template

# Use Ruby docker image for Markdown lint.
.ruby_template: &ruby_template
  image: ruby:2-alpine
  <<: *report_template

# Deploy process need an ssh private key set on the Project settings.
# We use an alipne docker image to make this lightweight, all images
# used with this must be based on Alpine Linux.
.ssh_agent_template:
  before_script: &ssh_agent_template
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Note this deploy key must be manually added to
    # /home/ubuntu/.ssh/authorized_keys
    # On the target. Private key value is set on Gitlab settings.
    - echo -e "${STAGING_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    # Avoid warning on connection.
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

# Sample of a build, considering a Drupal 8 with composer, Bootstrap Sass.
# For more samples see
#   https://docs.gitlab.com/ee/ci/examples/deployment/composer-npm-deploy.html
.build_template: &build_template
  image: composer:latest
  script:
    # Sample to install a Drupal 8 with drupal composer template.
    - composer create-project drupal-composer/drupal-project:8.x-dev drupal
      --stability dev --no-interaction --ignore-platform-reqs --quiet
    - cp -r drupal/* .
    - composer require drupal/bootstrap
      --ignore-platform-reqs --no-scripts --quiet
    # Install project libraries and dependencies from a composer.json
    # - composer install
    #   --ignore-platform-reqs --no-suggest --no-interaction --quiet
    # Install and use compass if using Sass file in the theme.
    # - apk add --update ruby ruby-dev libffi-dev build-base
    # - gem install --no-document listen sass compass bootstrap-sass
    # - compass compile ${WEB_ROOT}/themes/custom/${THEME}
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    paths:
      # Folders from Drupal template, add any folders/files you need.
      - ./drush
      - ./scripts
      - ./vendor
      - ./${WEB_ROOT}
      - LICENSE
      - README.md
      - composer.json
      - composer.lock
      - load.environment.php
    expire_in: 1 day

# Testing template for phpunit, this provide Apache / Php.
.test_template: &test_template
  stage: test
  except:
    - master
  only:
    - testing
  image: juampynr/drupal8ci:latest
  services:
    - mariadb:10.3
  before_script:
    - mkdir -p /var/www/html
    - ln -s ${WEB_ROOT} /var/www/html/web
    - apache2-foreground&
    - mkdir -p ${REPORT_DIR}
    - chmod -R 777 ${REPORT_DIR}
    - cp config/phpunit.xml ${WEB_ROOT}/core/
  variables:
    MYSQL_ALLOW_EMPTY_PASSWORD: "1"
    MYSQL_DATABASE: drupal8
    DB_URL: "mysql://root@mariadb/drupal8"
    SIMPLETEST_DB: "mysql://root@mariadb/drupal8"
    SIMPLETEST_BASE_URL: "http://localhost"
    BROWSERTEST_OUTPUT_DIRECTORY: "${WEB_ROOT}/sites/simpletest"
  <<: *report_template
  dependencies:
    - build

###############################################################################
# Cache libraries in between jobs by branch, see
#   https://docs.gitlab.com/ee/ci/caching/#caching-php-dependencies
###############################################################################
cache:
  key: coder
  paths:
    # If we can avoid downloading coder.
    - coder

###############################################################################
# Jobs definition.
###############################################################################

# Build when not on master.
build:
  <<: *build_template
  stage: build
  except:
    - master
  after_script:
    - ./vendor/bin/drush site:install
      --yes
      --root "/var/www/html/web"
      --db-url ${DB_URL}
    - mkdir -p dump
    - if [ ! -f $CI_PROJECT_DIR/dump/db_dump.sql ];
      then
        ./vendor/bin/drush sql-dump
        --gzip
        --result-file=${CI_PROJECT_DIR}/dump/db_dump.sql;
      fi
  # On composer build we cache the composer folders.
  cache:
    key: drupal-build-cache
    paths:
      - ${WEB_ROOT}
      - vendor
      - dump

# Unit tests.
unit_kernel_tests:
  <<: *test_template
  script:
    - cd ${WEB_ROOT}
    - sudo -E -u www-data
      ../vendor/bin/phpunit
        -c core
        --log-junit ../${REPORT_DIR}/phpunit.xml
        --testdox-html ../${REPORT_DIR}/phpunit.html
        --testsuite=unit
        ${UNIT_TEST_ROOT}

web_tests:
  <<: *test_template
  script:
    - cd ${WEB_ROOT}
    - sudo -E -u www-data
      ../vendor/bin/phpunit
        -c core
        --log-junit ../${REPORT_DIR}/phpunit.xml
        --testdox-html ../${REPORT_DIR}/phpunit.html
        --group Drupal
        ${UNIT_TEST_ROOT}

# Unit tests nonfunctional.
code_coverage:
  <<: *test_template
  script:
    - mkdir -p ${REPORT_DIR}/coverage-xml
    - mkdir -p ${REPORT_DIR}/coverage-html
    - chmod -R 777 ${REPORT_DIR}
    - cd ${WEB_ROOT}
    - timeout 60m sudo -E -u www-data
      ../vendor/bin/phpunit
        -c core
        --coverage-xml ../${REPORT_DIR}/coverage-xml
        --coverage-html ../${REPORT_DIR}/coverage-html
        --testsuite nonfunctional
        ${UNIT_TEST_ROOT}

# Automated quality check job when something is pushed/merged on master.
# We have a limit on errors we accept on the tools, if failed we run a
# report and stop.
codequality:
  stage: code quality
  <<: *phpqa_template
  script:
    - phpqa ${PHPQA_REPORT} ${TOOLS} ${PHPQA_PHP_CODE}
  # Limit to branch push, for more options see
  # https://docs.gitlab.com/ee/ci/yaml/#only-and-except-simplified
  only:
    - branches

# Drupal coding standard best practices report (can not be included in
# codequality as we are already running Drupal coding standard).
best practices:
  stage: code quality
  <<: *phpqa_template
  script:
    - phpqa ${PHPQA_REPORT}
      --config ./phpqa_config/phpcs_drupal_best_practices
      --tools phpcs:10
      ${PHPQA_PHP_CODE}
  only:
    - branches
  # Allow failure to produce report and alert.
  allow_failure: true

# Gitlab code quality tool, can be a long job and need GitLab Runner with
# docker-in-docker executor, see
#   https://docs.gitlab.com/ee/ci/examples/code_climate.html
#   https://docs.gitlab.com/ee/user/project/merge_requests/code_quality_diff.html
code_quality:
  image: docker:stable
  stage: code quality
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]
  when: manual

# This is a eslint report.
es lint:
  stage: code lint
  <<: *node_template
  script:
    # If there is a build this part is not needed.
    - apk --no-cache add curl
    - curl https://cgit.drupalcode.org/drupal/plain/.eslintrc.json?h=8.5.x
      -o ${WEB_ROOT}/.eslintrc.json -s
    - mkdir -p ${WEB_ROOT}/core
    - curl https://cgit.drupalcode.org/drupal/plain/core/.eslintrc.json?h=8.5.x
      -o ${WEB_ROOT}/core/.eslintrc.json -s
    # Drupal 8.5.x specfic rules override.
    - curl https://cgit.drupalcode.org/drupal/plain/core/.eslintrc.passing.json?h=8.5.x
      -o ${WEB_ROOT}/core/.eslintrc.passing.json -s
    - npm install -g eslint eslint-config-airbnb eslint-plugin-import@^2.7.0
     eslint-plugin-jsx-a11y@^6.0.2 eslint-plugin-react@^7.4.0
    # Run the eslint command to generate a report.
    - eslint --config ./${WEB_ROOT}/core/.eslintrc.passing.json
      --format html
      --output-file ${REPORT_DIR}/es-lint-report.html
      --ignore-pattern ${JS_CODE_IGNORE}
      ${JS_CODE}
  allow_failure: true

# This is a sass lint report.
sass lint:
  stage: code lint
  <<: *node_template
  script:
    - npm install -g sass-lint
    - sass-lint ${SASS_CODE}
      --verbose
      --format html
      --output ${REPORT_DIR}/sass-lint-report.html
      --ignore ${JS_CODE_IGNORE}
  allow_failure: true

# This is a markdown lint report.
markdown lint:
  stage: code lint
  <<: *ruby_template
  script:
    - gem install mdl
    - mdl ./ > ${REPORT_DIR}/markdown_lint.txt
  allow_failure: true
  when: manual

# Phpmetrics report, no pass or failure as it's just informative.
phpmetrics:
  stage: php code metrics
  only:
    - staging
    - master
  <<: *phpqmetrics_template
  script:
    - ./phpmetrics
      --report-html=${REPORT_DIR}/metrics
      --extensions=php,inc,module
      ${PHP_CODE}
  when: manual

# Phploc report, no pass or failure as it's just informative.
phploc:
  stage: php code metrics
  only:
    - staging
    - master
  <<: *phpqa_template
  script:
    - phpqa ${PHPQA_REPORT}
      --tools phploc
      ${PHPQA_PHP_CODE}
  when: manual

# Same reports for all Drupal codes including our custom.
# Those commands require enough resources from the runner.
phpmetrics All:
  stage: php code metrics
  only:
    - staging
    - master
  <<: *phpqmetrics_template
  script:
    - ./phpmetrics
      --report-html=${REPORT_DIR}/metrics
      --extensions=php,inc,module
      ${WEB_ROOT}
  cache:
    key: drupal-build-cache
  dependencies:
    - build
  when: manual

phploc All:
  stage: php code metrics
  only:
    - staging
    - master
  <<: *phpqa_template
  script:
    - phpqa ${PHPQA_REPORT} --tools phploc ${PHPQA_ALL_CODE}
  cache:
    key: drupal-build-cache
  dependencies:
    - build
  when: manual

###############################################################################
# Deploy jobs definition.
# This is a sample workflow, testing is run on master and testing branches
# pushes or merge, other deploy are manual.
# You need to be sure we can ssh to the machine, see .ssh_agent_template above,
# adapt your deploy script.
###############################################################################

deploy to testing:
  stage: deploy to testing
  environment:
    name: testing
    url: http://${TESTING_HOST}
  before_script: *ssh_agent_template
  script:
    - echo "Deploy to testing"
    # - ssh $USER_NAME@$TESTING_HOST
    #   "cd ${DRUPAL_FOLDER}; ./scripts/deploy_script.sh;"
  only:
    - testing
    - master

deploy to staging:
  stage: deploy to staging
  environment:
    name: staging
    url: http://${STAGING_HOST}
  before_script: *ssh_agent_template
  script:
    - echo "Deploy to staging"
    # - ssh $USER_NAME@$TESTING_HOST
    #   "cd ${DRUPAL_FOLDER}; ./scripts/deploy_script.sh;"
  only:
    - staging
    - master
  when: manual

deploy to production:
  stage: deploy to production
  environment:
    name: production
    url: http://${PRODUCTION_HOST}
  before_script: *ssh_agent_template
  script:
    - echo "Deploy to production"
    # - ssh $USER_NAME@$TESTING_HOST
    #   "cd ${DRUPAL_FOLDER}; ./scripts/deploy_script.sh;"
  only:
    - production
    - master
  when: manual
